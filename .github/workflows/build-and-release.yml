# @format

name: Build and Release Remote Controls

on:
    # 当推送标签时触发（如 V2.2.8）
    push:
        tags:
            - "V*.*.*.*"
            - "V*.*.*"
            - "V*"

    # 允许手动触发工作流（用于测试）
    workflow_dispatch:
        inputs:
            version:
                description: "版本号（如：2.2.8）"
                required: true
                default: "2.2.8"
                type: string
            update_version_files:
                description: "是否更新版本文件"
                required: false
                default: true
                type: boolean

env:
    PYTHON_VERSION: "3.12.10"
    # 设置UTF-8编码以正确处理中文字符
    PYTHONIOENCODING: "utf-8"
    PYTHONUTF8: "1"

jobs:
    build-and-release:
        runs-on: windows-latest
        permissions:
            contents: write
            actions: read
            issues: read
            pull-requests: read

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Extract version from tag or input
              id: version
              shell: pwsh
              env:
                  PYTHONIOENCODING: utf-8
                  PYTHONUTF8: 1
              run: |
                  # 设置PowerShell输出编码为UTF-8
                  [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                  $PSDefaultParameterValues['*:Encoding'] = 'utf8'

                  if ("${{ github.event_name }}" -eq "push") {
                    # 从标签提取版本号（去掉 V 前缀）
                    $tagName = "${{ github.ref_name }}"
                    $version = $tagName -replace '^V', ''
                    echo "version=$version" >> $env:GITHUB_OUTPUT
                    echo "tag_name=$tagName" >> $env:GITHUB_OUTPUT
                    echo "is_tag_push=true" >> $env:GITHUB_OUTPUT
                  } else {
                    # 手动触发使用输入的版本号
                    $version = "${{ github.event.inputs.version }}"
                    $tagName = "V$version"
                    echo "version=$version" >> $env:GITHUB_OUTPUT
                    echo "tag_name=$tagName" >> $env:GITHUB_OUTPUT
                    echo "is_tag_push=false" >> $env:GITHUB_OUTPUT
                  }
                  echo "构建版本: $version"
                  echo "标签名称: $tagName"

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  cache: "pip"

            - name: Create virtual environment
              shell: pwsh
              env:
                  PYTHONIOENCODING: utf-8
                  PYTHONUTF8: 1
              run: |
                  # 设置PowerShell输出编码为UTF-8
                  [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                  $PSDefaultParameterValues['*:Encoding'] = 'utf8'

                  python -m venv .venv
                  .\.venv\Scripts\Activate.ps1
                  python -m pip install --upgrade pip setuptools wheel

            - name: Install dependencies
              shell: pwsh
              env:
                  PYTHONIOENCODING: utf-8
                  PYTHONUTF8: 1
              run: |
                  # 设置PowerShell输出编码为UTF-8
                  [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                  $PSDefaultParameterValues['*:Encoding'] = 'utf8'

                  .\.venv\Scripts\Activate.ps1

                  # 强制重新安装所有依赖
                  pip install --upgrade pip setuptools wheel

                  echo "=== 安装主要依赖 ==="
                  # 首先尝试从requirements.txt安装
                  pip install -r requirements.txt --force-reinstall

                  # 如果requirements.txt安装失败，手动安装关键依赖
                  echo "=== 确保关键依赖已安装 ==="
                  pip install paho-mqtt>=2.1.0 --upgrade
                  pip install pystray>=0.19.5 --upgrade  
                  pip install pywin32>=310 --upgrade
                  pip install psutil>=7.0.0 --upgrade
                  pip install pillow>=11.2.1 --upgrade
                  pip install win11toast>=0.35 --upgrade
                  pip install pyautogui>=0.9.54 --upgrade
                  pip install wmi>=1.5.1 --upgrade
                  pip install comtypes>=1.4.10 --upgrade
                  pip install pycaw>=20240210 --upgrade

                  pip install pyinstaller>=6.13.0
                  # pip install nuitka>=2.7.12 zstandard>=0.24.0  # 已禁用Nuitka构建

                  # 验证关键依赖是否正确安装
                  echo "=== 验证依赖安装 ==="
                  python -c "import pystray; print('pystray version:', pystray.__version__)"
                  python -c "import paho.mqtt.client as mqtt; print('paho-mqtt: OK')"
                  python -c "import win32com.client; print('pywin32: OK')"
                  python -c "import tkinter; print('tkinter: OK')"
                  python -c "import psutil; print('psutil: OK')"
                  python -c "import PIL; print('Pillow: OK')"

                  echo "=== 已安装的包 ==="
                  pip list | Select-String -Pattern "pystray|paho|pywin32|pillow|psutil|win11toast"

            - name: Update version files
              if: ${{ github.event.inputs.update_version_files == 'true' || github.event_name == 'push' }}
              shell: pwsh
              env:
                  PYTHONIOENCODING: utf-8
                  PYTHONUTF8: 1
                  LC_ALL: en_US.UTF-8
                  LANG: en_US.UTF-8
              run: |
                  # 设置PowerShell输出编码为UTF-8
                  [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                  $PSDefaultParameterValues['*:Encoding'] = 'utf8'

                  # 显式设置Python环境变量
                  $env:PYTHONIOENCODING = "utf-8"
                  $env:PYTHONUTF8 = "1"

                  .\.venv\Scripts\Activate.ps1
                  $version = "${{ steps.version.outputs.version }}"

                  # 执行前再次确认编码设置
                  python -c "import sys; print('Python encoding:', sys.stdout.encoding)"

                  python installer/update_version.py $version
                  echo "版本文件已更新到: $version"

            - name: Test source files
              shell: pwsh
              env:
                  PYTHONIOENCODING: utf-8
                  PYTHONUTF8: 1
              run: |
                  # 设置PowerShell输出编码为UTF-8
                  [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                  $PSDefaultParameterValues['*:Encoding'] = 'utf8'

                  # 显式设置Python环境变量
                  $env:PYTHONIOENCODING = "utf-8"
                  $env:PYTHONUTF8 = "1"

                  .\.venv\Scripts\Activate.ps1

                  echo "=== 验证Python环境 ==="
                  python --version
                  python -c "import sys; print('Python path:', sys.executable)"

                  echo "=== 验证关键依赖 ==="
                  $failed = $false

                  try { python -c "import pystray; print('✓ pystray: OK')" } catch { echo "✗ pystray: MISSING"; $failed = $true }
                  try { python -c "import paho.mqtt.client as mqtt; print('✓ paho-mqtt: OK')" } catch { echo "✗ paho-mqtt: MISSING"; $failed = $true }
                  try { python -c "import win32com.client; print('✓ pywin32: OK')" } catch { echo "✗ pywin32: MISSING"; $failed = $true }
                  try { python -c "import psutil; print('✓ psutil: OK')" } catch { echo "✗ psutil: MISSING"; $failed = $true }
                  try { python -c "import PIL; print('✓ Pillow: OK')" } catch { echo "✗ Pillow: MISSING"; $failed = $true }

                  if ($failed) {
                    echo "❌ 关键依赖缺失，停止构建"
                    exit 1
                  }

                  echo "✅ 关键依赖验证通过，跳过源文件导入测试（PyInstaller构建时会自动验证）"

            - name: Build with PyInstaller
              shell: pwsh
              env:
                  PYTHONIOENCODING: utf-8
                  PYTHONUTF8: 1
                  LC_ALL: en_US.UTF-8
                  LANG: en_US.UTF-8
              run: |
                  # 设置PowerShell输出编码为UTF-8
                  [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                  $PSDefaultParameterValues['*:Encoding'] = 'utf8'

                  # 显式设置Python环境变量
                  $env:PYTHONIOENCODING = "utf-8"
                  $env:PYTHONUTF8 = "1"

                  .\.venv\Scripts\Activate.ps1
                  $version = "${{ steps.version.outputs.version }}"

                  # 运行PyInstaller构建脚本
                  echo "开始PyInstaller构建..."
                  try {
                    pwsh -NoProfile -ExecutionPolicy Bypass -File installer/build_installer.ps1 $version
                    echo "✅ PyInstaller构建完成"
                  } catch {
                    echo "❌ PyInstaller构建失败: $_"
                    exit 1
                  }

                  # 验证构建产物
                  if (Test-Path "installer/dist") {
                    echo "=== 构建产物 ==="
                    Get-ChildItem -Path "installer/dist" -Recurse | ForEach-Object { echo $_.FullName }
                    
                    # 检查关键文件是否存在
                    $requiredFiles = @("RC-main.exe", "RC-GUI.exe", "RC-tray.exe")
                    $missingFiles = @()
                    foreach ($file in $requiredFiles) {
                      if (!(Test-Path "installer/dist/$file")) {
                        $missingFiles += $file
                      }
                    }
                    
                    if ($missingFiles.Count -gt 0) {
                      echo "❌ 缺少关键文件: $($missingFiles -join ', ')"
                      exit 1
                    } else {
                      echo "✅ 所有关键文件构建成功"
                    }
                  } else {
                    echo "❌ 构建输出目录不存在"
                    exit 1
                  }

            - name: Build with Nuitka (backup)
              if: false # 禁用Nuitka构建，仅使用PyInstaller
              shell: pwsh
              env:
                  PYTHONIOENCODING: utf-8
                  PYTHONUTF8: 1
                  LC_ALL: en_US.UTF-8
                  LANG: en_US.UTF-8
              run: |
                  # 设置PowerShell输出编码为UTF-8
                  [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                  $PSDefaultParameterValues['*:Encoding'] = 'utf8'

                  # 显式设置Python环境变量
                  $env:PYTHONIOENCODING = "utf-8"
                  $env:PYTHONUTF8 = "1"

                  .\.venv\Scripts\Activate.ps1
                  $version = "${{ steps.version.outputs.version }}"

                  # 运行Nuitka构建脚本（作为备用）
                  try {
                    pwsh -NoProfile -ExecutionPolicy Bypass -File installer/build_nuitka.ps1 $version
                    echo "Nuitka构建完成"
                  } catch {
                    echo "Nuitka构建失败，继续使用PyInstaller版本: $_"
                  }

            - name: List build artifacts
              shell: pwsh
              env:
                  PYTHONIOENCODING: utf-8
                  PYTHONUTF8: 1
              run: |
                  # 设置PowerShell输出编码为UTF-8
                  [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                  $PSDefaultParameterValues['*:Encoding'] = 'utf8'

                  echo "=== 构建产物列表 ==="
                  if (Test-Path "installer/dist") {
                    echo "EXE文件:"
                    Get-ChildItem -Path "installer/dist" -Filter "*.exe" | ForEach-Object { 
                      echo "  $($_.Name) ($([math]::Round($_.Length/1MB, 2)) MB)"
                    }
                    
                    echo "安装包:"
                    Get-ChildItem -Path "installer/dist/installer" -Filter "*.exe" -ErrorAction SilentlyContinue | ForEach-Object {
                      echo "  $($_.Name) ($([math]::Round($_.Length/1MB, 2)) MB)"
                    }
                  }

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: remote-controls-v${{ steps.version.outputs.version }}
                  path: |
                      installer/dist/*.exe
                      installer/dist/installer/*.exe
                  retention-days: 90

            - name: Generate changelog
              id: changelog
              shell: pwsh
              env:
                  PYTHONIOENCODING: utf-8
                  PYTHONUTF8: 1
              run: |
                  # 设置PowerShell输出编码为UTF-8
                  [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                  $PSDefaultParameterValues['*:Encoding'] = 'utf8'

                  $version = "${{ steps.version.outputs.version }}"
                  $tagName = "${{ steps.version.outputs.tag_name }}"

                  # 获取上一个标签
                  $previousTag = ""
                  try {
                    $tags = git tag --sort=-version:refname | Select-Object -First 2
                    if ($tags.Count -gt 1) {
                      $previousTag = $tags[1]
                    } else {
                      $previousTag = git rev-list --max-parents=0 HEAD
                    }
                  } catch {
                    $previousTag = "HEAD~10"
                  }

                  echo "当前标签: $tagName"
                  echo "上一个标签: $previousTag"

                  # 检查是否为同版本重复构建
                  $isRepeatVersion = $false
                  $existingRelease = ""
                  try {
                    # 检查是否已存在相同标签的Release
                    $releaseInfo = gh release view $tagName --json body,createdAt 2>$null
                    if ($releaseInfo) {
                      $isRepeatVersion = $true
                      $existingRelease = ($releaseInfo | ConvertFrom-Json).body
                      echo "检测到重复版本: $tagName，将合并更新日志"
                    }
                  } catch {
                    echo "未找到现有Release，创建新的更新日志"
                  }

                  # 优先从 CHANGELOG.md 提取版本更新内容
                  $changelogContent = ""
                  try {
                    if (Test-Path 'CHANGELOG.md') {
                      $changelogFile = Get-Content 'CHANGELOG.md' -Raw
                      # 匹配以 "# V<version>" 开头直到下一个版本标题或文件结尾
                      $escapedVersion = [regex]::Escape($version)
                      $pattern = "(?ms)^#\s*V$escapedVersion\b[\s\S]*?(?=^#\s*V\d+\.\d+\.\d+\b|\Z)"
                      $match = [regex]::Match($changelogFile, $pattern)
                      if ($match.Success) {
                        $section = $match.Value.Trim()
                        # 去掉第一行标题（# Vx.y.z ...）
                        $lines = $section -split "`n"
                        if ($lines.Length -gt 1) {
                          $body = ($lines | Select-Object -Skip 1) -join "`n"
                        } else { $body = $section }
                        $body = $body.Trim()
                        if ($body) {
                          echo "已从 CHANGELOG.md 提取版本更新内容"
                          $changelogContent = $body
                        }
                      }
                    }
                  } catch {
                    echo "从 CHANGELOG.md 提取内容失败: $_"
                  }

                  # 如果 CHANGELOG.md 没有内容，尝试从 md/up.md 提取
                  if (-not $changelogContent) {
                    try {
                      if (Test-Path 'md/up.md') {
                        $upContent = Get-Content 'md/up.md' -Raw
                        # 匹配以 "# V<version>" 开头直到下一个版本标题或文件结尾
                        $escapedVersion = [regex]::Escape($version)
                        $pattern = "(?ms)^#\s*V$escapedVersion\b[\s\S]*?(?=^#\s*V\d+\.\d+\.\d+\b|\Z)"
                        $m = [regex]::Match($upContent, $pattern)
                        if ($m.Success) {
                          $section = $m.Value.Trim()
                          # 去掉第一行标题（# Vx.y.z ...）
                          $lines = $section -split "`n"
                          if ($lines.Length -gt 1) {
                            $body = ($lines | Select-Object -Skip 1) -join "`n"
                          } else { $body = $section }
                          $body = $body.Trim()
                          if ($body) {
                            echo "已从 md/up.md 提取版本段落"
                            $changelogContent = $body
                          }
                        } else {
                          echo "未在 md/up.md 中找到版本 $version 的标题段落"
                        }
                      } else {
                        echo "md/up.md 不存在"
                      }
                    } catch {
                      echo "提取 up.md 版本段落时出现异常: $_"
                    }
                  }

                  # 如果还是没有内容，生成commit日志
                  if (-not $changelogContent) {
                    $commitLog = ""
                    if ($previousTag -ne "") {
                      if ($isRepeatVersion) {
                        # 重复版本：获取更广泛的commit历史
                        echo "使用扩展的commit历史"
                        $commits = git log --pretty=format:"- %s (%h)" "HEAD~20..HEAD" | Where-Object { $_ -ne "" }
                      } else {
                        # 新版本：获取与上一个标签的差异
                        $commits = git log --pretty=format:"- %s (%h)" "$previousTag..HEAD" | Where-Object { $_ -ne "" }
                      }
                      
                      if ($commits) {
                        $commitLog = $commits -join "`n"
                      }
                    }

                    # 如果没有commit变更，添加默认说明
                    if (-not $commitLog) {
                      if ($isRepeatVersion) {
                        $commitLog = "- 重新构建和发布优化`n- 修复构建流程和依赖问题"
                      } else {
                        $commitLog = "- 版本发布和构建优化"
                      }
                    }
                    $changelogContent = $commitLog
                  }

                  # 处理重复版本的更新日志合并
                  $versionNote = ""
                  if ($isRepeatVersion) {
                    $versionNote = "🔁 重新构建发布 - $(Get-Date -Format 'yyyy-MM-dd HH:mm') UTC`n`n此版本包含之前发布的所有内容，并修复了构建流程问题。`n"
                    
                    # 尝试从现有Release中提取之前的更新内容
                    if ($existingRelease -and $existingRelease.Contains("### 🔄 更新内容")) {
                      $previousContent = $existingRelease -split "### 🔄 更新内容"
                      if ($previousContent.Length -gt 1) {
                        $previousUpdates = ($previousContent[1] -split "### 📚 相关链接")[0].Trim()
                        if ($previousUpdates) {
                          $changelogContent = "**本次重新构建的更新：**`n$changelogContent`n`n**之前版本的更新内容：**`n$previousUpdates"
                        }
                      }
                    }
                  } else {
                    $versionNote = "🚀 自动构建发布 - $(Get-Date -Format 'yyyy-MM-dd HH:mm') UTC"
                  }

                  # 生成最终更新日志内容
                  $finalChangelog = @"
                  $versionNote

                  ### 🔄 更新内容
                  $changelogContent

                  ### 📚 相关链接
                  - [📖 项目文档](https://github.com/${{ github.repository }}/blob/main/README.md)
                  - [📋 完整更新日志](https://github.com/${{ github.repository }}/blob/main/md/up.md)
                  - [💾 历史版本](https://github.com/${{ github.repository }}/releases)
                  "@

                  # 将内容写入GitHub输出（处理多行内容）
                  $delimiter = "EOF$(Get-Random)"
                  echo "changelog<<$delimiter" >> $env:GITHUB_OUTPUT
                  echo $finalChangelog >> $env:GITHUB_OUTPUT
                  echo $delimiter >> $env:GITHUB_OUTPUT

                  echo "✅ 更新日志生成完成"

            # 可选：使用第三方Action生成更专业的更新日志
            - name: Generate Release Notes with GitHub API
              if: false # 设置为 true 启用此功能
              id: release_notes
              uses: mikepenz/release-changelog-builder-action@v4
              with:
                  configuration: |
                      {
                        "categories": [
                          {
                            "title": "## 🚀 新功能",
                            "labels": ["feature", "enhancement"]
                          },
                          {
                            "title": "## 🐛 Bug修复", 
                            "labels": ["bug", "fix"]
                          },
                          {
                            "title": "## 📖 文档更新",
                            "labels": ["documentation", "docs"]
                          },
                          {
                            "title": "## 🔧 其他更新",
                            "labels": []
                          }
                        ],
                        "ignore_labels": ["ignore"],
                        "sort": "ASC",
                        "template": "#{{CHANGELOG}}\n\n**完整更新**: #{{UNCATEGORIZED}}"
                      }
                  fromTag: ${{ github.event.before }}
                  toTag: ${{ github.sha }}
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Create Release
              if: ${{ steps.version.outputs.is_tag_push == 'true' || github.event_name == 'workflow_dispatch' }}
              id: create_release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ steps.version.outputs.tag_name }}
                  name: Remote Controls ${{ steps.version.outputs.tag_name }}
                  body: ${{ steps.changelog.outputs.changelog }}
                  draft: false
                  prerelease: false
                  files: |
                      installer/dist/RC-main.exe
                      installer/dist/RC-GUI.exe
                      installer/dist/RC-tray.exe
                      installer/dist/installer/Remote-Controls-Installer-${{ steps.version.outputs.version }}.exe
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Build Summary
              shell: pwsh
              env:
                  PYTHONIOENCODING: utf-8
                  PYTHONUTF8: 1
              run: |
                  # 设置PowerShell输出编码为UTF-8
                  [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                  $PSDefaultParameterValues['*:Encoding'] = 'utf8'

                  echo "=== 构建总结 ==="
                  echo "版本: ${{ steps.version.outputs.version }}"
                  echo "标签: ${{ steps.version.outputs.tag_name }}"
                  echo "Python: ${{ env.PYTHON_VERSION }}"
                  echo "触发方式: ${{ github.event_name }}"
                  if ("${{ github.event_name }}" -eq "push") {
                    echo "标签推送: ${{ github.ref_name }}"
                  } else {
                    echo "手动触发: ${{ github.event.inputs.version }}"
                  }
                  echo "构建完成 ✅"
